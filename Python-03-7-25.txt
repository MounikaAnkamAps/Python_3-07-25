1-->Invert a dictionary with list values (group keys by their values)
Input:
d = {'a': 1, 'b': 2, 'c': 1, 'd': 3}
Output:
{1: ['a', 'c'], 2: ['b'], 3: ['d']}
 (Hint: Use setdefault method)

d = {'a': 1, 'b': 2, 'c': 1, 'd': 3}
res={}
for i,j in d.items():
    res.setdefault(j,[]).append(i)
print(res)

2-->Find Max and Min Value in Dictionary
Input:
d = {'a': 10, 'b': 5, 'c': 15}
Output:
Max Value → 15
Min Value → 5

d= {'a': 10, 'b': 5, 'c': 15}
vals = list(d.values())
max_val = vals[0]
min_val = vals[0]
for i in vals:
    if i> max_val:
        max_val = i
    if i< min_val:
        min_val = i
print("Max Value :", max_val)
print("Min Value :", min_val)


3-->Create a dictionary using dictionary comprehension for the given list of numbers, where:
 Each number is a key.
 The value is "prime" if the number is prime.
 The value is "notprime" if the number is not prime.
 Output:   {2: 'prime', 3: 'prime', 4: 'notprime', 5: 'prime', 6: 'notprime'}

res = {i: ("prime" if all(i % y != 0 for y in range(2, int(i**0.5) + 1)) else "Not a prime")for i in range(3, 6)}
print(res)

4-->Explain about setdefault function in dictionary data type ?

--The setdefault() method in a Python dictionary is used to Get the value of a specific key if the key does not exist, it Adds the key to the dictionary with the specified       
  default value and returns the default value.

5-->Difference between d[key] and d.get(key)?

--In Python, both d[key] and d.get(key) are used to access values from a dictionary, but they behave differently when the key does not exist.d[key] is used when you're confident the key is present, while d.get(key) is useful when you're unsure and want to avoid errors. It helps in building error-proof and clean programs, especially when working with dynamic or user-input-based dictionaries.

6-->What is the difference between Shallow Copy and Deep Copy in Python? Explain with examples.
Shallow Copy:
A shallow copy creates a new object, but does not create copies of nested objects inside it. Instead, it copies references to the nested objects.
So, changes in nested objects affect both the original and the copy.

Shallow Copy Example:
import copy

list1 = [[1, 2], [3, 4]]
shallow = copy.copy(list1)

shallow[0][0] = 100

print("Original:", list1)   
print("Shallow :", shallow) 

Deep Copy:
A deep copy creates a new object, and also recursively copies all nested objects. Changes made to any part of the deep copy do not affect the original.

Deep Copy Example:

import copy
list1 = [[1, 2], [3, 4]]
deep = copy.deepcopy(list1)
deep[0][0] = 100
print("Original:", list1) 
print("Deep    :", deep)  

7-->Count Vowels in String with Dict Comprehension.
    
s = "welcome to python programming"
vowels = "aeiou"
vowel_count = {ch: s.count(ch) for ch in vowels if ch in s}
print(vowel_count)

8-->What is an Automorphic Number? Give examples.
 Expected Answer: An Automorphic Number is a number whose square ends with the number itself.

Examples: 5 (5² = 25), 6 (6² = 36), 76 (76² = 5776)

num=int(input("Enter:"))
p=num**2
n_l=len(str(num))
if p%10**n_l==num:
    print("Automorphic num")
else:
    print("Not an Automorphic")